#!/bin/bash
#
#   bitbucket
#




    # global
    dir_config="$HOME/.config/bitbucket"
    url_api="https://api.bitbucket.org/1.0/repositories"


    # | feature(s)

        function create {

            # check(s)
            [ ! -e "$dir_config/auth/password" ] && usage_init   && exit 2
            [ ! -e "$dir_config/auth/username" ] && usage_init   && exit 2
            [   -z "$1"                        ] && usage_create && exit 2

            # var - details - config
            username=$( cat "$dir_config/auth/username" )
            password=$( cat "$dir_config/auth/password" )

            # var - details - repository - name
            name="$1"

            # create
            curl=$(
                curl    -ksS                            \
                        -X POST                         \
                        --user "$username:$password"    \
                        "$url_api"                      \
                        -d "name=$name"
            )

            # return
            return 0

        }

        function init {

            # args - seperate
            while getopts ":p:u:" FLAG; do
                case "$FLAG" in
                    p)  password="$OPTARG"
                        ;;
                    u)  username="$OPTARG"
                        ;;
                esac
            done

            # check(s)
            [ -z "$password" ] && usage_init && exit 2
            [ -z "$username" ] && usage_init && exit 2

            # mkdir
            mkdir -p "$dir_config/auth"

            # set
            echo "$password" > "$dir_config/auth/password"
            echo "$username" > "$dir_config/auth/username"

            # return
            return 0

        }

    # feature(s) |


    # | function(s)

        function usage {
            echo "$0 usage: $0 [init|create]"
        }

        function usage_create {
            echo "$0 usage: $0 create repository"
        }

        function usage_init {
            echo "$0 usage: $0 init -u username -p password"
        }

    # function(s) |


    # | logic

        # check - arg(s)
        [ $# -lt 1 ] && usage && exit 2

        # case - arg - 1
        case "$1" in
            init)       shift
                        init $@
                        ;;
            create)     shift
                        create $@
                        ;;
            *)          usage
                        ;;
        esac

    # logic |




#
#   <(%.0)>
#
