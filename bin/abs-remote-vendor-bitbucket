#!/usr/bin/python3
#
#
#   A CLI interface to BitBucket REST API.
#
#




# import(s)
from os.path import expanduser
import argparse
import os
import requests
import sys


# argument(s)
PARSER = argparse.ArgumentParser()
PARSER.add_argument('option', choices=['create','delete','init','list', 'remove'])
PARSER.add_argument("--username", help="specify a username", action="store", dest="user_username")
PARSER.add_argument("--password", help="specify a password", action="store", dest="user_password")
PARSER.add_argument("--repository", help="specify a repository", action="store", dest="repository")
PARSER.add_argument("--verbose", help="show more detailed output", action="store_true")


# global(s)
DIRECTORY_HOME   = expanduser("~")
DIRECTORY_CONFIG = DIRECTORY_HOME + "/.config/abs/remote/vendor/bitbucket"
REPOSITORY       = ""
USER_USERNAME    = ""
USER_PASSWORD    = ""
URL_API          = "https://api.bitbucket.org/2.0"
VERBOSE          = False




# display
def display(message):
    if VERBOSE == True:
        print(message.capitalize() + ".")




# feature(s)
def feature_create():

    # global(s)
    global REPOSITORY
    global URL_API
    global USER_USERNAME
    global USER_PASSWORD

    # display - init - start
    display('attempting to create a new repository')

    # ? - repository
    if not REPOSITORY:
        REPOSITORY = input("Enter repository name: ")

    # create - repository -> bitbucket
    request = requests.post(
        URL_API + "/repositories/" + USER_USERNAME + "/" + REPOSITORY,
        auth=(USER_USERNAME, USER_PASSWORD),
        data = {'is_private': True}
    )

    # check - error
    if request.status_code != 200:
        display("request failed with http status code '" + str(request.status_code) + "'")
        sys.exit(request.status_code)

    # display - slug
    print("git@bitbucket.org:" + USER_USERNAME + "/" + REPOSITORY + ".git")

    # display - init - end
    display("created new repository '" + REPOSITORY + "'")


def feature_delete():

    # global(s)
    global REPOSITORY
    global URL_API
    global USER_USERNAME
    global USER_PASSWORD

    # display - init - start
    display('attempting to delete an existing repository')

    # ? - repository
    if not REPOSITORY:
        REPOSITORY = input("Enter repository name: ")

    # delete - repository -> bitbucket
    request = requests.delete(
        URL_API + "/repositories/" + USER_USERNAME + "/" + REPOSITORY,
        auth=(USER_USERNAME, USER_PASSWORD)
    )

    # check - error
    if request.status_code != 200:
        display("request failed with http status code '" + str(request.status_code) + "'")
        sys.exit(request.status_code)

    # display - init - end
    display("deleted repository '" + REPOSITORY + "'")


def feature_init():

    # global(s)
    global USER_USERNAME
    global USER_PASSWORD

    # display - init - start
    display('initializing bitbucket configuration')

    # ? - username
    if not USER_USERNAME:
        USER_USERNAME = input("Enter bitbucket username: ")

    # ? - password
    if not USER_PASSWORD:
        USER_PASSWORD = input("Enter bitbucket password: ")

    # write -> config -> username
    with open(DIRECTORY_CONFIG + "/username", 'w') as out:
        out.write(USER_USERNAME + '\n')

    # write -> config -> password
    with open(DIRECTORY_CONFIG + "/password", 'w') as out:
        out.write(USER_PASSWORD + '\n')

    # display - init - end
    display('initializing complete')


def feature_list():

    # global(s)
    global URL_API
    global USER_USERNAME
    global USER_PASSWORD

    # display - list - start
    display('attempting to list repositories')

    # var - repositories
    repositories = []

    # var - url
    url = URL_API + "/repositories/" + USER_USERNAME

    # loop - request - repositories
    while url != "":

        # request - repository(s)
        request = requests.get(
            url,
            auth=(USER_USERNAME, USER_PASSWORD)
        )

        # deocde - response -> json
        json = request.json()

        # build - repositories
        for value in json['values']:
            repository         = {}
            repository['name'] = value['name']
            repository['url']  = "https://bitbucket.org/" + value['full_name']
            repositories.append(repository)

        # var - url
        try:
            url = json['next']
        except:
            url = ""

    # sort - repositories
    repositories = sorted(repositories, key=lambda k: k['name']) 

    # print
    for repository in repositories:
        print(repository['name'])

    # display - list - complete
    display('list complete')




# load
def load_config():

    # global(s)
    global USER_USERNAME
    global USER_PASSWORD

    # write -> config -> username
    if os.path.exists(DIRECTORY_CONFIG + '/username'):
        with open(DIRECTORY_CONFIG + "/username", 'r') as out:
            USER_USERNAME = out.read().replace('\n', '')

    # write -> config -> password
    if os.path.exists(DIRECTORY_CONFIG + '/password'):
        with open(DIRECTORY_CONFIG + "/password", 'r') as out:
            USER_PASSWORD = out.read().replace('\n', '')




# main
def main():

    # global(s)
    global REPOSITORY
    global USER_USERNAME
    global USER_PASSWORD
    global VERBOSE

    # ? - config
    if not os.path.exists(DIRECTORY_CONFIG):
        os.makedirs(DIRECTORY_CONFIG)

    # load - config
    load_config()

    # get - argument(s)
    arguments = PARSER.parse_args()

    # ? - repository
    if arguments.repository:
        REPOSITORY = arguments.repository

    # ? - user - password
    if arguments.user_password:
        USER_PASSWORD = arguments.user_password

    # ? - user - username
    if arguments.user_username:
        USER_USERNAME = arguments.user_username

    # ? - verbose
    if arguments.verbose:
        VERBOSE = True

    # arguments - option -> feature
    if   arguments.option == "create":
        feature_create()
    elif arguments.option == "delete":
        feature_delete()
    elif arguments.option == "init":
        feature_init()
    elif arguments.option == "list":
        feature_list()
    elif arguments.option == "remove":
        feature_delete()
    else:
        display("invalid option")
        sys.exit(2)

main()




